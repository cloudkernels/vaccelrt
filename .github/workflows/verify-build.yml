name: Verify Build

on:
  workflow_call:
    inputs:
      runner:
        type: string
        default: '["gcc", "lite", "2204"]'
      options:
        type: string
        default: 'auto_features=enabled'
      dist-options:
        type: string
        default: ''
      valgrind:
        type: boolean
        default: true
      plugin:
        type: string
        default: ''
      release:
        type: boolean
        default: false
    secrets:
      GIT_CLONE_PAT:
        required: false
      AWS_ACCESS_KEY:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false

jobs:
  verify_build:
    name: Verify Build
    runs-on: [self-hosted, "${{ matrix.archconfig }}", "${{ fromJSON(inputs.runner) }}"]

    strategy:
      matrix:
        archconfig: [x86_64, aarch64, armv7l]
        build_type: [debug, release]
      fail-fast: false

    env:
      CC: gcc-12
      CXX: g++-12
    steps:
      - name: Checkout .github directory
        uses: actions/checkout@v4
        with:
          sparse-checkout: .github
          repository: ${{ (inputs.plugin != '' && 'nubificus/vaccel') || '' }}
          ref: ${{ (inputs.plugin != '' && 'ci_rework_plugin') || '' }}

      - name: Initialize workspace
        id: initialize_workspace
        uses: ./.github/actions/initialize-workspace
        with:
          fetch-depth: 0
          remote-actions-repo: ${{ (inputs.plugin != '' && 'nubificus/vaccel') || '' }}
          token: ${{ secrets.GIT_CLONE_PAT || github.token }}

      - name: Download artifacts from s3
        if: ${{ inputs.plugin != '' }} 
        uses: ./.github/actions/download-from-s3
        with:
          branch: ${{ steps.initialize_workspace.outputs.remote-branch }}
          build-type: ${{matrix.build_type}}
          arch: ${{matrix.archconfig}}
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          output-dir: ./artifacts/downloads/${{matrix.archconfig}}/${{matrix.build_type}}
          install: 'true'

      - name: Build project
        if: ${{ inputs.release == false }}
        uses: ./.github/actions/build
        with:
          prefix: ${{github.workspace}}/artifacts/${{matrix.archconfig}}/${{matrix.build_type}}/opt
          build-dir: build_${{matrix.build_type}}
          build-type: ${{matrix.build_type}}
          options: ${{ inputs.options }}
          install: 'true'

      - name: Run examples
        if: ${{ inputs.release == false }}
        uses: ./.github/actions/run-examples
        with:
          prefix: ${{github.workspace}}/artifacts/${{matrix.archconfig}}/${{matrix.build_type}}/opt
          plugin: ${{ inputs.plugin }}

      - name: Run examples with valgrind
        if: ${{ inputs.release == false && inputs.valgrind == true}}
        uses: ./.github/actions/run-examples
        with:
          prefix: ${{github.workspace}}/artifacts/${{matrix.archconfig}}/${{matrix.build_type}}/opt
          valgrind: 'true'
          plugin: ${{ inputs.plugin }}

      - name: Build project (dist)
        if: ${{ contains(github.event.pull_request.labels.*.name, 'ok-to-upload') || inputs.release == true }}
        uses: ./.github/actions/build
        with:
          prefix: ${{github.workspace}}/artifacts/${{matrix.archconfig}}/${{matrix.build_type}}/opt
          build-dir: build_${{matrix.build_type}}
          build-type: ${{matrix.build_type}}
          options: ${{ inputs.dist-options || inputs.options }}
          dist: 'true'

      - name: Upload to s3
        if: ${{ contains(github.event.pull_request.labels.*.name, 'ok-to-upload') || inputs.release == true }}
        uses: ./.github/actions/upload-to-s3
        with:
          build-dir: build_${{matrix.build_type}}
          build-type: ${{matrix.build_type}}
          arch: ${{matrix.archconfig}}
          plugin: ${{ inputs.plugin }}
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Clean-up
        if: ${{ always() }}
        run: |
          sudo rm -rf artifacts build_${{ matrix.build_type }}
          [ -n "$(dpkg -l vaccel 2> /dev/null)" ] && \
            sudo apt-get purge -y vaccel || echo
        shell: bash
