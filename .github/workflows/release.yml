name: Build and upload

on:
  pull_request:
    types:
      - closed

  workflow_dispatch:

jobs:
  check_merged:
    if: ${{ github.event.pull_request.merged == true || github.event_name  == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo The PR was merged - running upload workflows

  build:
    needs: [check_merged]
    runs-on: [self-hosted, "${{ matrix.archconfig }}", gcc, lite, "2204"]

    strategy:
      matrix:
        archconfig: [x86_64, aarch64, armv7l]
        build_type: [debug, release]
      fail-fast: false

    env:
      CC: gcc-12
      CXX: g++-12
    steps:
      - name: Cleanup previous jobs
        run: |
          echo "Cleaning up previous runs"
          sudo rm -rf ${{ github.workspace }}/*
          sudo rm -rf ${{ github.workspace }}/.??*

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Determine SHA and Branch
        run: |
          if [ -n "${{ github.event.pull_request.head.sha }}" ]; then
            SHA="${{ github.event.pull_request.head.sha }}"
            BRANCH="${{ github.event.pull_request.head.ref }}"
            echo "PR merged. SHA: $SHA, Branch: $BRANCH"
          elif [ "${{ github.event_name }}" == "push" ]; then
            SHA="${{ github.sha }}"
            BRANCH="${{ github.ref }}"
            BRANCH="${BRANCH#refs/heads/}" # Remove "refs/heads/" prefix
            echo "Push to main branch. SHA: $SHA, Branch: $BRANCH"
          else
            echo "Event not supported."
            exit 1
          fi
          # Since we know this is a PR that just got merged, we ignore the 
          # branch name, we just use main
          echo "ARTIFACT_SHA=$(echo $SHA)" >> $GITHUB_ENV
          #echo "ARTIFACT_NAME=$(echo $BRANCH)" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=$(echo main)" >> $GITHUB_ENV

      - name: Install project dependencies
        id: install_dependencies
        run: |
          sudo apt update && sudo apt-get install -y gcc-12 g++-12 ninja-build
          sudo pip install meson

      - name: Build project
        id: build_vaccelrt
        run: |
          meson setup \
            --prefix=${{github.workspace}}/artifacts/${{matrix.archconfig}}/${{matrix.build_type}}/opt \
            --buildtype=${{matrix.build_type}} \
            -Dexamples=enabled \
            build_${{matrix.build_type}}
          meson compile -C build_${{matrix.build_type}}
          meson install -C build_${{matrix.build_type}}

      - name: Build vAccel plugins
        id: build_plugins
        run: |
          meson setup \
            --reconfigure \
            -Dplugin-noop=enabled \
            build_${{matrix.build_type}}
          meson compile -C build_${{matrix.build_type}}
          meson install -C build_${{matrix.build_type}}

      - name: Build project for packages
        id: build_pkg_vaccelrt
        run: |
          meson setup \
            -Dexamples=enabled \
            -Dplugins=enabled \
            build_pkg_${{matrix.build_type}}
          meson dist --formats gztar --include-subprojects -C build_pkg_${{matrix.build_type}}

      - name: Get package name
        shell: bash
        id: get_package_deb
        run: |
          echo ::set-output name=NAME::$(basename build_pkg_${{ matrix.build_type }}/meson-dist/vaccel-*.deb)

      - name: Get tar name
        shell: bash
        id: get_package_tar
        run: |
          echo ::set-output name=NAME::$(basename build_pkg_${{ matrix.build_type }}/meson-dist/vaccel-*.tar.gz)

      - name: Upload deb artifact to s3 by name
        uses: cloudkernels/minio-upload@v4
        if: ${{ env.ARTIFACT_NAME != 'master' }}
        with:
          url: https://s3.nubificus.co.uk
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          local-path: build_pkg_${{ matrix.build_type }}/${{ steps.get_package_deb.outputs.NAME }}
          remote-path: nbfc-assets/github/vaccelrt/${{ env.ARTIFACT_NAME }}/${{ matrix.archconfig }}/${{ matrix.build_type }}-deb/
          policy: 1

      - name: Upload deb artifact to s3
        uses: cloudkernels/minio-upload@v4
        with:
          url: https://s3.nubificus.co.uk
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          local-path: build_pkg_${{ matrix.build_type }}/${{ steps.get_package_deb.outputs.NAME }}
          remote-path: nbfc-assets/github/vaccelrt/${{ env.ARTIFACT_SHA }}/${{ matrix.archconfig }}/${{ matrix.build_type }}-deb/
          policy: 1

      - name: Upload tar artifact to s3 by name
        uses: cloudkernels/minio-upload@v4
        if: ${{ env.ARTIFACT_NAME != 'master' }}
        with:
          url: https://s3.nubificus.co.uk
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          local-path: build_pkg_${{ matrix.build_type }}/${{ steps.get_package_tar.outputs.NAME }}
          remote-path: nbfc-assets/github/vaccelrt/${{ env.ARTIFACT_NAME }}/${{ matrix.archconfig }}/${{ matrix.build_type }}-tar/
          policy: 1

      - name: Upload tar artifact to s3
        uses: cloudkernels/minio-upload@v4
        with:
          url: https://s3.nubificus.co.uk
          access-key: ${{ secrets.AWS_ACCESS_KEY }}
          secret-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          local-path: build_pkg_${{ matrix.build_type }}/${{ steps.get_package_tar.outputs.NAME }}
          remote-path: nbfc-assets/github/vaccelrt/${{ env.ARTIFACT_SHA }}/${{ matrix.archconfig }}/${{ matrix.build_type }}-tar/
          policy: 1

      - name: Clean-up
        run: sudo rm -rf artifacts build_${{ matrix.build_type }}

  coverage_docs:
    uses: ./.github/workflows/coverage_upload.yml
    needs: [build]
    secrets: inherit
