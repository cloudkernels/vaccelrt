name: utils

on:
  workflow_call:

jobs:
  test_valgrind:
    runs-on: [self-hosted, "x86_64", gcc, lite, "2204"]
    env:
      CC: gcc-12
      CXX: g++-12
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install project dependencies
        id: install_dependencies
        run: |
          sudo apt update && sudo apt-get install -y lcov gcc-12 g++-12 ninja-build valgrind
          sudo pip install meson

      - name: Run tests
        run: |
          meson setup \
            -Db_coverage=true \
            -Dexamples=enabled \
            -Dtests=enabled \
            build
          meson compile -C build
          meson test --print-errorlogs -C build

      - name: Run tests with valgrind
        run: |
          meson test --wrap='valgrind' -C build

      - name: Run examples with valgrind
        env:
          LD_LIBRARY_PATH: ${{github.workspace}}/build/src
          VACCEL_BACKENDS: ${{github.workspace}}/build/plugins/noop/libvaccel-noop.so
          VACCEL_DEBUG_LEVEL: 4
        run: |
          cd build/examples
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./classify ../../examples/images/example.jpg 1
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./classify_generic ../../examples/images/example.jpg 1
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./detect ../../examples/images/example.jpg 1
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./detect_generic ../../examples/images/example.jpg 1
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./pose ../../examples/images/example.jpg 1
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./pose_generic ../../examples/images/example.jpg 1
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./segment ../../examples/images/example.jpg 1
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./segment_generic ../../examples/images/example.jpg 1
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./depth ../../examples/images/example.jpg 1
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./depth_generic ../../examples/images/example.jpg 1
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./sgemm
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./sgemm_generic
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./minmax 262144 ../../examples/input/input_262144.csv 5 100
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./minmax_generic 262144 ../../examples/input/input_262144.csv 5 100
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./pynq_vector_add
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./pynq_array_copy
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./pynq_parallel
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./torch_inference ../../examples/images/example.jpg ./../../examples/models/torch
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./single_model ../../examples/models/tf/frozen_graph.pb
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./tf_saved_model ../../examples/models/tf/lstm2
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./tf_inference ../../examples/models/tf/lstm2
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./tflite_inference ../../examples/models/tf/lstm2.tflite
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes ./mbench 1 ../../examples/images/example.jpg

  spell_check:
    name: spell check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install codespell
        run: pip3 install codespell

      - name: Run spell check
        run: |
          codespell ./src
          codespell ./test/docs
          codespell ./test/op
          codespell ./test/unit
        continue-on-error: true

  cppcheck:
    name: cppcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install cppcheck
        run: sudo apt install cppcheck

      - name: Run cppcheck in src
        run: cppcheck --enable=style src

      - name: Run cppcheck in examples
        run: cppcheck --enable=style examples

      - name: Run cppcheck in test
        run: cppcheck --enable=style test

      - name: Run cppcheck in plugins
        run: cppcheck --enable=style plugins

  linter:
    name: linter
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: read
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: linter
        uses: super-linter/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DISABLE_ERRORS: true
          VALIDATE_CLANG_FORMAT: false
          FILTER_REGEX_EXCLUDE: .*(test|examples)/.*

  checkpatch:
    name: checkpatch review
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    steps:
      - name: "Calculate PR commits + 1"
        run: echo "PR_FETCH_DEPTH=$(( ${{ github.event.pull_request.commits }} + 1 ))" >> $GITHUB_ENV
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: ${{ env.PR_FETCH_DEPTH }}
      - name: Run checkpatch review
        uses: webispy/checkpatch-action@v9
        continue-on-error: true

  coverage_diff:
    needs: [checkpatch, spell_check, test_valgrind]
    runs-on: [self-hosted, "x86_64", gcc, lite, "2204"]
    #runs-on: ubuntu-latest
    outputs:
      commit_hash: ${{ steps.commit-and-push.outputs.commit_hash }}

    env:
      CC: gcc-12
      CXX: g++-12
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install dependencies for tests
        id: install_dependencies
        run: |
          sudo apt update && sudo apt-get install -y lcov gcc-12 g++-12 ninja-build libclang-dev
          sudo pip install meson gcovr pycobertura

      - name: Build and make tests for coverage (PR)
        id: run_coverage_pr
        run: |
          meson setup \
            -Db_coverage=true \
            -Dtests=enabled \
            build
          meson compile -C build
          meson test --print-errorlogs -C build
        shell: bash

      - name: Calculate coverage
        run: |
          echo "gcov-executable = gcov-12" > gcovr.cfg
          echo -e "filter = ../src/\nfilter = ../plugins/" >> gcovr.cfg
          ninja coverage-xml -C build
          cp build/meson-logs/coverage.xml docs/coverage/coverage_pr.xml

    ### This should produce a github comment showing coverage change however since this is the first release of test - doesn't do much
    ### TODO: add cache/artifacts to speed up this whole file

      - name: Build and make tests for coverage (main)
        id: run_coverage_main
        run: |
          git clone --recursive https://github.com/cloudkernels/vaccelrt vaccelrt_main
          cd vaccelrt_main
          meson setup \
            -Db_coverage=true \
            -Dtests=enabled \
            build
          meson compile -C build
          meson test --print-errorlogs -C build

          echo "gcov-executable = gcov-12" > gcovr.cfg
          echo -e "filter = ../src/\nfilter = ../plugins/" >> gcovr.cfg
          ninja coverage-xml -C build
          cp build/meson-logs/coverage.xml docs/coverage/coverage_main.xml

      - name: Calculate coverage diff
        run: |
          # Temporarily ignore coverage changes, just print out the exit code
          # https://github.com/aconrad/pycobertura?tab=readme-ov-file#diff-exit-codes
          pycobertura diff vaccelrt_main/docs/coverage/coverage_main.xml ./docs/coverage/coverage_pr.xml --no-color --no-source -f markdown > coverage_diff.txt  || PYCOB_RESULT=$?
          echo "pycobertura exited with $PYCOB_RESULT"
          echo '```' > temp_file && cat ./coverage_diff.txt >> temp_file && echo -e '\n```' >> temp_file && mv temp_file ./coverage_diff.txt
          rm -rf vaccelrt_main
        shell: bash

      - name: PR comment with file
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: ./coverage_diff.txt
